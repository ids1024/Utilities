#!/usr/bin/env python

# Statusbar script for dwm and dvtm
# TODO: Warnings and errors, string formatting


import os
import sys
import time
import argparse
import shutil
import logging
from subprocess import call
from itertools import zip_longest

from importlib.machinery import SourceFileLoader
conf = SourceFileLoader(
    "conf", os.path.expanduser("~/.dwmstatusrc")).load_module()
pidfile = conf.tmpdir + "/pidfile"
ctlpath = conf.tmpdir + "/ctl"


# Use with open() to open a fifo in nonblocking mode
def opener(file, flags):
    return os.open(file, flags | os.O_NONBLOCK)


def setDvtmBar(text):
    for fifopath in dvtmfifos.copy():
        try:
            with open(fifopath, 'w', opener=opener) as fifo:
                fifo.write(text + '\n')
        except OSError:  # Not open for reading
            logging.info("Discarding " + fifopath)
            dvtmfifos.discard(fifopath)


def setDwmBar(text):
    for display in dwmsessions.copy():
        if call(("xsetroot", "-name", text), env={"DISPLAY": display}) != 0:
            dwmsessions.discard(display)


def mainLoop():
    while True:
        for line in ctlfifo.read().splitlines():
            words = line.split()
            if words[0] == "dwm":
                dwmsessions.add(words[1])
            elif words[0] == "dvtm":
                dvtmfifos.add(words[1])
            elif words[0] == "exit":
                logging.info("Exiting.")
                return

        output = zip(*filter(None, (i() for i in conf.items)))
        indoutput = zip(*filter(None, (i() for i in conf.indicators)))

        unformatted, formatted = (conf.divider.join(items) +
            ('  ' + ' '.join(indicators) if indicators else '')
            for items, indicators in zip_longest(output, indoutput))

        setDwmBar(formatted)
        setDvtmBar(unformatted)

        if not (dwmsessions or dvtmfifos):
            logging.info("No more clients. Exiting.")
            return

        time.sleep(1)


logging.basicConfig(
    filename="/tmp/dwmstatus.log",
    level=logging.INFO,
    datefmt='%s',  # Unix time
    format="%(asctime)s %(levelname)s:%(message)s")

argparser = argparse.ArgumentParser(description='Dwm and Dvtm Status Bar')
argparser.add_argument('--dvtm', help='Use with dvtm instead of dwm')
argparser.add_argument('--stop', action='store_true', help='Stop server')
argparser.add_argument('--restart', action='store_true', help='Restart server')
args = argparser.parse_args()

try:
    with open(pidfile) as file:
        os.kill(int(file.read()), 0)  # test if process exists
except FileNotFoundError:
    pass
except ProcessLookupError:
    shutil.rmtree(conf.tmpdir)
else:
    if args.stop or args.restart:
        cmd = "exit"
    elif args.dvtm:
        cmd = "dvtm " + args.dvtm
    else:
        cmd = "dwm " + os.environ["DISPLAY"]
    with open(ctlpath, 'w') as fifo:
        fifo.write(cmd)
    if args.restart:
        time.sleep(1)
    else:
        sys.exit()

# Exit if args.stop, otherwise run in background
if args.stop or os.fork() != 0:
    sys.exit()

os.mkdir(conf.tmpdir)
with open(pidfile, 'w') as file:
    file.write(str(os.getpid()))

os.mkfifo(ctlpath)
ctlfifo = open(ctlpath, opener=opener)
dvtmfifos = set()
dwmsessions = set()

if args.dvtm:
    dvtmfifos.add(args.dvtm)
else:
    dwmsessions.add(os.environ["DISPLAY"])

mainLoop()
shutil.rmtree(conf.tmpdir)
ctlfifo.close()
